{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Plugins = void 0;\n\nclass Plugins {\n  static getPlugin(plugin) {\n    return Plugins.plugins.filter(t => t.id === plugin)[0];\n  }\n\n  static addPlugin(plugin) {\n    if (!Plugins.getPlugin(plugin.id)) {\n      Plugins.plugins.push(plugin);\n    }\n  }\n\n  static getAvailablePlugins(container) {\n    const res = new Map();\n    const availablePlugins = Plugins.plugins.filter(t => t.needsPlugin(container.options));\n\n    for (const plugin of availablePlugins) {\n      res.set(plugin.id, plugin.getPlugin(container));\n    }\n\n    return res;\n  }\n\n  static loadOptions(options, sourceOptions) {\n    for (const plugin of Plugins.plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n\n  static getPreset(preset) {\n    return Plugins.presets.get(preset);\n  }\n\n  static addPreset(presetKey, options) {\n    if (!Plugins.getPreset(presetKey)) {\n      Plugins.presets.set(presetKey, options);\n    }\n  }\n\n  static addShapeDrawer(type, drawer) {\n    if (!Plugins.getShapeDrawer(type)) {\n      Plugins.drawers.set(type, drawer);\n    }\n  }\n\n  static getShapeDrawer(type) {\n    return Plugins.drawers.get(type);\n  }\n\n  static getSupportedShapes() {\n    return Plugins.drawers.keys();\n  }\n\n}\n\nexports.Plugins = Plugins;\nPlugins.plugins = [];\nPlugins.presets = new Map();\nPlugins.drawers = new Map();","map":{"version":3,"sources":["/Users/jekaprudnik/Desktop/SmartBrain/face-recognition-brain/node_modules/tsparticles/dist/Utils/Plugins.js"],"names":["Object","defineProperty","exports","value","Plugins","getPlugin","plugin","plugins","filter","t","id","addPlugin","push","getAvailablePlugins","container","res","Map","availablePlugins","needsPlugin","options","set","loadOptions","sourceOptions","getPreset","preset","presets","get","addPreset","presetKey","addShapeDrawer","type","drawer","getShapeDrawer","drawers","getSupportedShapes","keys"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMA,OAAN,CAAc;AACM,SAATC,SAAS,CAACC,MAAD,EAAS;AACrB,WAAOF,OAAO,CAACG,OAAR,CAAgBC,MAAhB,CAAwBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASJ,MAAvC,EAA+C,CAA/C,CAAP;AACH;;AACe,SAATK,SAAS,CAACL,MAAD,EAAS;AACrB,QAAI,CAACF,OAAO,CAACC,SAAR,CAAkBC,MAAM,CAACI,EAAzB,CAAL,EAAmC;AAC/BN,MAAAA,OAAO,CAACG,OAAR,CAAgBK,IAAhB,CAAqBN,MAArB;AACH;AACJ;;AACyB,SAAnBO,mBAAmB,CAACC,SAAD,EAAY;AAClC,UAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;AACA,UAAMC,gBAAgB,GAAGb,OAAO,CAACG,OAAR,CAAgBC,MAAhB,CAAwBC,CAAD,IAAOA,CAAC,CAACS,WAAF,CAAcJ,SAAS,CAACK,OAAxB,CAA9B,CAAzB;;AACA,SAAK,MAAMb,MAAX,IAAqBW,gBAArB,EAAuC;AACnCF,MAAAA,GAAG,CAACK,GAAJ,CAAQd,MAAM,CAACI,EAAf,EAAmBJ,MAAM,CAACD,SAAP,CAAiBS,SAAjB,CAAnB;AACH;;AACD,WAAOC,GAAP;AACH;;AACiB,SAAXM,WAAW,CAACF,OAAD,EAAUG,aAAV,EAAyB;AACvC,SAAK,MAAMhB,MAAX,IAAqBF,OAAO,CAACG,OAA7B,EAAsC;AAClCD,MAAAA,MAAM,CAACe,WAAP,CAAmBF,OAAnB,EAA4BG,aAA5B;AACH;AACJ;;AACe,SAATC,SAAS,CAACC,MAAD,EAAS;AACrB,WAAOpB,OAAO,CAACqB,OAAR,CAAgBC,GAAhB,CAAoBF,MAApB,CAAP;AACH;;AACe,SAATG,SAAS,CAACC,SAAD,EAAYT,OAAZ,EAAqB;AACjC,QAAI,CAACf,OAAO,CAACmB,SAAR,CAAkBK,SAAlB,CAAL,EAAmC;AAC/BxB,MAAAA,OAAO,CAACqB,OAAR,CAAgBL,GAAhB,CAAoBQ,SAApB,EAA+BT,OAA/B;AACH;AACJ;;AACoB,SAAdU,cAAc,CAACC,IAAD,EAAOC,MAAP,EAAe;AAChC,QAAI,CAAC3B,OAAO,CAAC4B,cAAR,CAAuBF,IAAvB,CAAL,EAAmC;AAC/B1B,MAAAA,OAAO,CAAC6B,OAAR,CAAgBb,GAAhB,CAAoBU,IAApB,EAA0BC,MAA1B;AACH;AACJ;;AACoB,SAAdC,cAAc,CAACF,IAAD,EAAO;AACxB,WAAO1B,OAAO,CAAC6B,OAAR,CAAgBP,GAAhB,CAAoBI,IAApB,CAAP;AACH;;AACwB,SAAlBI,kBAAkB,GAAG;AACxB,WAAO9B,OAAO,CAAC6B,OAAR,CAAgBE,IAAhB,EAAP;AACH;;AAxCS;;AA0CdjC,OAAO,CAACE,OAAR,GAAkBA,OAAlB;AACAA,OAAO,CAACG,OAAR,GAAkB,EAAlB;AACAH,OAAO,CAACqB,OAAR,GAAkB,IAAIT,GAAJ,EAAlB;AACAZ,OAAO,CAAC6B,OAAR,GAAkB,IAAIjB,GAAJ,EAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Plugins = void 0;\nclass Plugins {\n    static getPlugin(plugin) {\n        return Plugins.plugins.filter((t) => t.id === plugin)[0];\n    }\n    static addPlugin(plugin) {\n        if (!Plugins.getPlugin(plugin.id)) {\n            Plugins.plugins.push(plugin);\n        }\n    }\n    static getAvailablePlugins(container) {\n        const res = new Map();\n        const availablePlugins = Plugins.plugins.filter((t) => t.needsPlugin(container.options));\n        for (const plugin of availablePlugins) {\n            res.set(plugin.id, plugin.getPlugin(container));\n        }\n        return res;\n    }\n    static loadOptions(options, sourceOptions) {\n        for (const plugin of Plugins.plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    static getPreset(preset) {\n        return Plugins.presets.get(preset);\n    }\n    static addPreset(presetKey, options) {\n        if (!Plugins.getPreset(presetKey)) {\n            Plugins.presets.set(presetKey, options);\n        }\n    }\n    static addShapeDrawer(type, drawer) {\n        if (!Plugins.getShapeDrawer(type)) {\n            Plugins.drawers.set(type, drawer);\n        }\n    }\n    static getShapeDrawer(type) {\n        return Plugins.drawers.get(type);\n    }\n    static getSupportedShapes() {\n        return Plugins.drawers.keys();\n    }\n}\nexports.Plugins = Plugins;\nPlugins.plugins = [];\nPlugins.presets = new Map();\nPlugins.drawers = new Map();\n"]},"metadata":{},"sourceType":"script"}