{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/jekaprudnik/Desktop/SmartBrain/MagicBrain/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/jekaprudnik/Desktop/SmartBrain/MagicBrain/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/jekaprudnik/Desktop/SmartBrain/MagicBrain/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jekaprudnik/Desktop/SmartBrain/MagicBrain/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nvar Particle_1 = require(\"./Particle\");\n\nvar Utils_1 = require(\"../Utils\");\n\nvar InteractionManager_1 = require(\"./Particle/InteractionManager\");\n\nvar Particles = /*#__PURE__*/function () {\n  function Particles(container) {\n    _classCallCheck(this, Particles);\n\n    this.container = container;\n    this.array = [];\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    var canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n  }\n\n  _createClass(Particles, [{\n    key: \"count\",\n    get: function get() {\n      return this.array.length;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var container = this.container;\n      var options = container.options;\n      var handled = false;\n\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particlesInitialization !== undefined) {\n            handled = plugin.particlesInitialization();\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (!handled) {\n        for (var i = this.count; i < options.particles.number.value; i++) {\n          this.addParticle();\n        }\n      }\n\n      if (options.infection.enable) {\n        for (var _i = 0; _i < options.infection.infections; _i++) {\n          var notInfected = this.array.map(function (p) {\n            return p.infecter;\n          }).filter(function (p) {\n            return p.infectionStage === undefined;\n          });\n          var infected = Utils_1.Utils.itemFromArray(notInfected);\n          infected.startInfection(0);\n        }\n      }\n\n      this.interactionManager.init();\n      container.noise.init();\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      this.clear();\n      this.init();\n      this.draw({\n        value: 0,\n        factor: 0\n      });\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index, quantity) {\n      if (index >= 0 && index <= this.count) {\n        var _iterator2 = _createForOfIteratorHelper(this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var particle = _step2.value;\n            particle.destroy();\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(particle) {\n      this.removeAt(this.array.indexOf(particle));\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      var container = this.container;\n      var particlesToDelete = [];\n      container.noise.update();\n\n      var _iterator3 = _createForOfIteratorHelper(this.array),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _particle = _step3.value;\n\n          _particle.move(delta);\n\n          if (_particle.destroyed) {\n            particlesToDelete.push(_particle);\n            continue;\n          }\n\n          this.quadTree.insert(new Utils_1.Point(_particle.getPosition(), _particle));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      for (var _i2 = 0, _particlesToDelete = particlesToDelete; _i2 < _particlesToDelete.length; _i2++) {\n        var particle = _particlesToDelete[_i2];\n        this.remove(particle);\n      }\n\n      this.interactionManager.externalInteract(delta);\n\n      var _iterator4 = _createForOfIteratorHelper(this.container.particles.array),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _particle2 = _step4.value;\n\n          _particle2.update(delta);\n\n          this.interactionManager.particlesInteract(_particle2, delta);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n      container.canvas.clear();\n      var canvasSize = this.container.canvas.size;\n      this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n      this.update(delta);\n\n      var _iterator5 = _createForOfIteratorHelper(container.plugins),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n              plugin = _step5$value[1];\n\n          container.canvas.drawPlugin(plugin, delta);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(this.array),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var p = _step6.value;\n          p.draw(delta);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.array = [];\n    }\n  }, {\n    key: \"push\",\n    value: function push(nb, mouse, overrideOptions) {\n      var container = this.container;\n      var options = container.options;\n      var limit = options.particles.number.limit * container.density;\n      this.pushing = true;\n\n      if (limit > 0) {\n        var countToRemove = this.count + nb - limit;\n\n        if (countToRemove > 0) {\n          this.removeQuantity(countToRemove);\n        }\n      }\n\n      for (var i = 0; i < nb; i++) {\n        this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n      }\n\n      if (!options.particles.move.enable) {\n        this.container.play();\n      }\n\n      this.pushing = false;\n    }\n  }, {\n    key: \"addParticle\",\n    value: function addParticle(position, overrideOptions) {\n      try {\n        var particle = new Particle_1.Particle(this.container, position, overrideOptions);\n        this.array.push(particle);\n        return particle;\n      } catch (_a) {\n        console.log(\"error adding particle\");\n        return;\n      }\n    }\n  }, {\n    key: \"removeQuantity\",\n    value: function removeQuantity(quantity) {\n      var options = this.container.options;\n      this.removeAt(0, quantity);\n\n      if (!options.particles.move.enable) {\n        this.container.play();\n      }\n    }\n  }]);\n\n  return Particles;\n}();\n\nexports.Particles = Particles;","map":{"version":3,"sources":["/Users/jekaprudnik/Desktop/SmartBrain/MagicBrain/node_modules/tsparticles/dist/Core/Particles.js"],"names":["Object","defineProperty","exports","value","Particles","Particle_1","require","Utils_1","InteractionManager_1","container","array","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","Map","quadTree","QuadTree","Rectangle","width","height","length","options","handled","plugins","plugin","particlesInitialization","undefined","i","count","particles","number","addParticle","infection","enable","infections","notInfected","map","p","infecter","filter","infectionStage","infected","Utils","itemFromArray","startInfection","init","noise","clear","draw","factor","index","quantity","splice","particle","destroy","removeAt","indexOf","delta","particlesToDelete","update","move","destroyed","push","insert","Point","getPosition","remove","externalInteract","particlesInteract","drawPlugin","nb","mouse","overrideOptions","limit","density","pushing","countToRemove","removeQuantity","position","play","Particle","_a","console","log"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particles = void 0;\nconst Particle_1 = require(\"./Particle\");\nconst Utils_1 = require(\"../Utils\");\nconst InteractionManager_1 = require(\"./Particle/InteractionManager\");\nclass Particles {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.interactionManager = new InteractionManager_1.InteractionManager(container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        const container = this.container;\n        const options = container.options;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (!handled) {\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        if (options.infection.enable) {\n            for (let i = 0; i < options.infection.infections; i++) {\n                const notInfected = this.array.map((p) => p.infecter).filter((p) => p.infectionStage === undefined);\n                const infected = Utils_1.Utils.itemFromArray(notInfected);\n                infected.startInfection(0);\n            }\n        }\n        this.interactionManager.init();\n        container.noise.init();\n    }\n    redraw() {\n        this.clear();\n        this.init();\n        this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity) {\n        if (index >= 0 && index <= this.count) {\n            for (const particle of this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)) {\n                particle.destroy();\n            }\n        }\n    }\n    remove(particle) {\n        this.removeAt(this.array.indexOf(particle));\n    }\n    update(delta) {\n        const container = this.container;\n        const particlesToDelete = [];\n        container.noise.update();\n        for (const particle of this.array) {\n            particle.move(delta);\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        this.interactionManager.externalInteract(delta);\n        for (const particle of this.container.particles.array) {\n            particle.update(delta);\n            this.interactionManager.particlesInteract(particle, delta);\n        }\n    }\n    draw(delta) {\n        const container = this.container;\n        container.canvas.clear();\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n        this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.array) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n    }\n    push(nb, mouse, overrideOptions) {\n        const container = this.container;\n        const options = container.options;\n        const limit = options.particles.number.limit * container.density;\n        this.pushing = true;\n        if (limit > 0) {\n            const countToRemove = this.count + nb - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n        }\n        if (!options.particles.move.enable) {\n            this.container.play();\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions) {\n        try {\n            const particle = new Particle_1.Particle(this.container, position, overrideOptions);\n            this.array.push(particle);\n            return particle;\n        }\n        catch (_a) {\n            console.log(\"error adding particle\");\n            return;\n        }\n    }\n    removeQuantity(quantity) {\n        const options = this.container.options;\n        this.removeAt(0, quantity);\n        if (!options.particles.move.enable) {\n            this.container.play();\n        }\n    }\n}\nexports.Particles = Particles;\n"]},"metadata":{},"sourceType":"script"}